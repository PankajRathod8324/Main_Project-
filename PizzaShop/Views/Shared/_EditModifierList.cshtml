@model DAL.ViewModel.ItemModifierVM


@if (Model != null)
{
    <div class="mt-3 p-2 border rounded modifier-group-edit" id="modifier-group-edit-@Model.ModifierGroupId" data-groupid="@Model.ModifierGroupId" data-itemid="@Model.ItemId">
        <input type="hidden" name="MenuModifierGroups[@Model.ModifierGroupId].ModifierGroupId" value="@Model.ModifierGroupId">

        <div class="d-flex justify-content-between align-items-center">
            <h5>@Model.ModifierGroupName</h5>
            <button type="button" class="btn btn-sm delete-group-edit" data-groupid="@Model.ModifierGroupId">
                <i class="fa fa-trash"></i>
            </button>
        </div>

        <div class="d-flex justify-content-between align-items-center">
            <select class="form-select min-input-edit" name="MenuModifierGroups[@Model.ModifierGroupId].MinSelection">
                @for (int i = 0; i <= 5; i++)
                {
                    <option value="@i" selected="@(i == Model.MinSelection ? "selected" : null)">@i</option>
                }
            </select>
            <select class="form-select max-input-edit" name="MenuModifierGroups[@Model.ModifierGroupId].MaxSelection">
                @for (int i = 0; i <= 10; i++)
                {
                    <option value="@i" selected="@(i == Model.MaxSelection ? "selected" : null)">@i</option>
                }
            </select>
        </div>

        <ul class="list-unstyled mt-2">
            @if (Model.MenuModifierGroupItem != null && Model.MenuModifierGroupItem.Any())
            {
                @for (int i = 0; i < Model.MenuModifierGroupItem.Count; i++)
                {
                    var modifier = Model.MenuModifierGroupItem[i];
                    <li class="d-flex justify-content-between">
                        <span>• @modifier.ModifierName</span>
                        <span>₹ @modifier.ModifierRate</span>

                        <input type="hidden" name="MenuModifierGroups[@Model.ModifierGroupId].MenuModifierGroupItem[@i].ModifierName" value="@modifier.ModifierName">
                        <input type="hidden" name="MenuModifierGroups[@Model.ModifierGroupId].MenuModifierGroupItem[@i].ModifierRate" value="@modifier.ModifierRate">
                    </li>
                }
            }
            else
            {
                <li>No modifiers available.</li>
            }
        </ul>
    </div>
}
else
{
    <p>No modifier groups available.</p>
}

<script>
       var selectedModifierGroupsEdit = [];
        console.log("inside ModifierGroupId Edit List");

        $("#modifier-group-edit").each(function () {
            var groupId = $(this).data("groupid");
            var itemId = $(this).data("itemid");

            console.log(itemId, groupId);

            $.ajax({
                url: '@Url.Action("GetModifiersGroupByItem", "Menu")',
                type: 'GET',
                dataType: 'json',
                data: { groupId: groupId, itemId: itemId },
                success: function (modifiers) {
                    console.log("Fetched Modifiers for Group:", groupId, modifiers);

                    modifiers.itemModifierGroups.forEach(modifier => {
                        // **Check if the modifier is already in the array**
                        let exists = selectedModifierGroupsEdit.some(existingModifier =>
                            existingModifier.itemId === modifier.itemId &&
                            existingModifier.modifierGroupId === modifier.modifierGroupId
                        );

                        if (!exists) { // **Only push if it doesn't exist**
                            selectedModifierGroupsEdit.push(modifier);
                        }
                        console.log(selectedModifierGroupsEdit);
                    });

                },
                error: function (xhr, status, error) {
                    console.error('Error loading modifiers:', xhr.responseText);
                }
            });
        });
        
    $("#modifierGroupDropdown").change(function () {
        var groupId = $(this).val();

        if (!groupId) {
            $("#modifierList").html(""); // Clear list if no group selected
            return;
        }

        var parentDiv = $("#modifierList");

        // **Check if this modifier group is already added**
        let exists = selectedModifierGroupsEdit.some(modifier => modifier.modifierGroupId == groupId);

        if (exists) {
            console.warn("Modifier group already exists in the array, skipping addition.");
            return;
        }

        $.ajax({
            url: '@Url.Action("GetModifiersByGroupEdit", "Menu")',
            type: 'GET',
            data: { groupId: groupId },
            success: function (response) {
                parentDiv.append(response); // Append new modifier group UI

                console.log("Selected Modifier Groups:", selectedModifierGroupsEdit);
                // Wait for DOM to update before adding to array

                var newGroup = parentDiv.find("#modifier-group-edit").last();
                console.log(newGroup);
                var minSelection = newGroup.find(".min-input-edit").val();
                var maxSelection = newGroup.find(".max-input-edit").val();

                selectedModifierGroupsEdit.push({
                    modifierGroupId: groupId, // Fix key name
                    minSelection: minSelection,
                    maxSelection: maxSelection
                });

                console.log("Selected Modifier Groups Edit:", selectedModifierGroupsEdit);

            }
        });
    });
    
    $(document).on("click", ".delete-group-edit", function () {
        var deleteid = $(this).data('groupid'); // Get the group ID to delete
        console.log("Deleting Modifier Group ID:", deleteid);

        // Remove the element from the DOM
        $(this).closest("#modifier-group-edit").remove();

        // **Correct filtering to remove only the selected group**
        selectedModifierGroupsEdit = selectedModifierGroupsEdit.filter(modifier =>
            modifier.modifierGroupId !== deleteid
        );

        console.log("Updated Modifier Groups after Delete:", selectedModifierGroupsEdit);
    });
</script>